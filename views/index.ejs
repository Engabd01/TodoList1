<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced To-Do List</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <!-- Include SortableJS library from a CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 50px 15px;
        }
        .todo-container {
            background: #fff; width: 90%; max-width: 600px;
            padding: 30px; border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }
        h1 { color: #333; font-size: 2rem; }
        #show-form-btn {
            padding: 10px 20px; border: none; background-color: #4a90e2;
            color: white; font-size: 16px; font-weight: 600;
            border-radius: 8px; cursor: pointer; transition: background-color 0.3s;
            white-space: nowrap; /* Prevents button text from wrapping */
        }
        #show-form-btn:hover { background-color: #357abd; }

        /* Modal Styles */
        .modal-overlay {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex; justify-content: center; align-items: center;
            opacity: 0; visibility: hidden;
            transition: opacity 0.3s, visibility 0.3s;
            z-index: 1000;
        }
        .modal-overlay.visible {
            opacity: 1; visibility: visible;
        }
        .modal-content {
            background: #fff; padding: 30px; border-radius: 15px;
            width: 90%; max-width: 500px;
            position: relative;
            transform: scale(0.9);
            transition: transform 0.3s;
        }
        .modal-overlay.visible .modal-content {
            transform: scale(1);
        }
        .close-btn {
            position: absolute; top: 15px; right: 15px;
            background: transparent; border: none;
            font-size: 24px; cursor: pointer; color: #aaa;
        }

        /* Form Styles */
        .add-task-form { display: flex; flex-direction: column; gap: 15px; }
        .form-row { display: flex; gap: 10px; }
        .form-group { flex: 1; display: flex; flex-direction: column; }
        .form-group label { margin-bottom: 5px; font-weight: 500; color: #555; font-size: 0.9em; }
        .form-group input, .form-group select, .form-group textarea {
            padding: 10px; border: 2px solid #ddd; border-radius: 8px;
            font-size: 16px; font-family: 'Poppins', sans-serif; width: 100%;
        }
        #add-task-btn {
            padding: 12px; border: none; background-color: #4a90e2;
            color: white; font-size: 16px; font-weight: 600;
            border-radius: 8px; cursor: pointer; margin-top: 10px;
        }

        /* Task List Styles */
        #task-list { list-style: none; }
        .task-item {
            display: flex; align-items: center; gap: 10px;
            padding: 15px 5px; border-bottom: 1px solid #eee;
        }
        .task-content { flex-grow: 1; }
        .task-main-info { font-weight: 500; font-size: 1.1em; }
        .task-main-info .category { color: #4a90e2; font-weight: 600; }
        .task-main-info .time { color: #888; font-size: 0.9em; }
        .task-note { color: #777; font-size: 0.95em; margin-top: 5px; }
        .task-item input[type="checkbox"] {
            accent-color: #4a90e2; width: 22px; height: 22px; cursor: pointer;
            flex-shrink: 0;
        }
        .task-item.done .task-content { text-decoration: line-through; color: #aaa; }
        .delete-btn {
            background-color: #ff5c5c; color: white; border: none;
            width: 30px; height: 30px; border-radius: 50%; cursor: pointer;
            font-size: 16px; font-weight: bold; display: flex;
            align-items: center; justify-content: center; flex-shrink: 0;
        }
        .drag-handle { cursor: grab; color: #ccc; font-size: 20px; padding: 0 10px; }
        .task-item.sortable-ghost { background: #f0f8ff; opacity: 0.8; }
        
        /* --- NEW: Responsive Styles for Mobile --- */
        @media (max-width: 600px) {
            body {
                padding: 20px 10px; /* Reduce overall padding */
            }
            .todo-container, .modal-content {
                padding: 20px; /* Reduce padding inside containers */
            }
            .header-container {
                flex-direction: column; /* Stack header items */
                align-items: stretch; /* Make items take full width */
                gap: 15px;
            }
            h1 {
                font-size: 1.8rem; /* Smaller title */
                text-align: center;
            }
            #show-form-btn {
                width: 100%; /* Make button full width */
                padding: 12px;
            }
            .form-row {
                flex-direction: column; /* Stack category and time inputs */
            }
            .task-main-info {
                font-size: 1rem; /* Smaller task font size */
            }
            .drag-handle {
                padding: 0 5px; /* Less space for drag handle */
            }
        }
    </style>
</head>
<body>
    <!-- Main Content Container -->
    <div class="todo-container">
        <div class="header-container">
            <h1>Task Manager</h1>
            <button id="show-form-btn">Add New Task</button>
        </div>
        
        <ul id="task-list">
            <% if (locals.tasks && tasks.length > 0) { %>
                <% tasks.forEach(task => { %>
                    <li class="task-item <%= task.done ? 'done' : '' %>" data-id="<%= task.id %>">
                        <span class="drag-handle">⠿</span>
                        <input type="checkbox" <%= task.done ? 'checked' : '' %>>
                        <div class="task-content">
                            <div class="task-main-info">
                                <span class="category"><%= task.category %>:</span>
                                <%= task.task %>
                                <% if (task.time_required_mins) { %>
                                    <span class="time">- <%= task.time_required_mins %> mins</span>
                                <% } %>
                            </div>
                            <% if (task.note) { %>
                                <div class="task-note"><%= task.note %></div>
                            <% } %>
                        </div>
                        <button class="delete-btn">✖</button>
                    </li>
                <% }) %>
            <% } %>
        </ul>
    </div>

    <!-- Modal for Adding a New Task -->
    <div class="modal-overlay" id="add-task-modal">
        <div class="modal-content">
            <button class="close-btn" id="close-modal-btn">&times;</button>
            <h2>Add a New Task</h2>
            <form id="add-task-form">
                <div class="form-group">
                    <label for="task-input">Task</label>
                    <input type="text" id="task-input" placeholder="What needs to be done?" required>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="category-select">Category</label>
                        <select id="category-select" required>
                            <option value="General">General</option>
                            <option value="Career">Career</option>
                            <option value="Health">Health</option>
                            <option value="Personal">Personal</option>
                            <option value="Finance">Finance</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="time-input">Time (mins)</label>
                        <input type="number" id="time-input" placeholder="e.g., 30">
                    </div>
                </div>
                <div class="form-group">
                    <label for="note-input">Notes</label>
                    <textarea id="note-input" rows="2" placeholder="Add any details..."></textarea>
                </div>
                <button type="submit" id="add-task-btn">Add Task</button>
            </form>
        </div>
    </div>

    <script>
        // --- Get DOM Elements ---
        const taskList = document.getElementById('task-list');
        const showFormBtn = document.getElementById('show-form-btn');
        const modal = document.getElementById('add-task-modal');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const taskForm = document.getElementById('add-task-form');

        // --- Modal Control ---
        function showModal() { modal.classList.add('visible'); }
        function hideModal() { modal.classList.remove('visible'); }

        showFormBtn.addEventListener('click', showModal);
        closeModalBtn.addEventListener('click', hideModal);
        modal.addEventListener('click', (event) => {
            // Close modal if user clicks on the overlay background
            if (event.target === modal) {
                hideModal();
            }
        });

        // --- Initialize Drag and Drop ---
        new Sortable(taskList, {
            handle: '.drag-handle', animation: 150, ghostClass: 'sortable-ghost'
        });

        // --- Event Listener for form submission (Adding a new task) ---
        taskForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            
            const taskData = {
                task: document.getElementById('task-input').value.trim(),
                category: document.getElementById('category-select').value,
                time_required_mins: document.getElementById('time-input').value,
                note: document.getElementById('note-input').value.trim()
            };

            if (taskData.task === '') return;

            try {
                const response = await fetch('/tasks', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(taskData)
                });

                if (response.ok) {
                    const newTask = await response.json();
                    addTaskToUI(newTask);
                    taskForm.reset();
                    hideModal(); // Hide modal after successful submission
                } else { console.error('Failed to add task'); }
            } catch (err) { console.error('Error:', err); }
        });

        // --- Event Listener for clicks on the task list (for checkbox and delete) ---
        taskList.addEventListener('click', async (event) => {
            const target = event.target;
            const taskItem = target.closest('.task-item');
            if (!taskItem) return;
            const taskId = taskItem.dataset.id;

            if (target.classList.contains('delete-btn')) {
                try {
                    const response = await fetch(`/tasks/${taskId}`, { method: 'DELETE' });
                    if (response.ok) { taskItem.remove(); } 
                    else { console.error('Failed to delete task'); }
                } catch (err) { console.error('Error:', err); }
            }

            if (target.type === 'checkbox') {
                const isDone = target.checked;
                taskItem.classList.toggle('done', isDone);
                try {
                    await fetch(`/tasks/${taskId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ done: isDone })
                    });
                } catch (err) { console.error('Error:', err); }
            }
        });

        // --- Helper function to add a task to the UI ---
        function addTaskToUI(task) {
            const taskItem = document.createElement('li');
            taskItem.className = `task-item ${task.done ? 'done' : ''}`;
            taskItem.dataset.id = task.id;

            const timeInfo = task.time_required_mins ? `<span class="time">- ${task.time_required_mins} mins</span>` : '';
            const noteInfo = task.note ? `<div class="task-note">${task.note}</div>` : '';

            taskItem.innerHTML = `
                <span class="drag-handle">⠿</span>
                <input type="checkbox" ${task.done ? 'checked' : ''}>
                <div class="task-content">
                    <div class="task-main-info">
                        <span class="category">${task.category}:</span>
                        ${task.task}
                        ${timeInfo}
                    </div>
                    ${noteInfo}
                </div>
                <button class="delete-btn">✖</button>
            `;
            taskList.appendChild(taskItem);
        }
    </script>
</body>
</html>
